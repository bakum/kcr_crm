package ua.divas.model;

import java.util.UUID;

import oracle.jbo.Key;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;

import ua.divas.classes.DivasEntityNoDelete;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Apr 03 22:25:27 EEST 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class QuartzPropertyImpl extends DivasEntityNoDelete {
    
    @Override
    protected void callId() {
        this.setId(UUID.randomUUID().toString());
    }
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        Id,
        InstanceName,
        ThreadpoolClass,
        ThreadCount,
        ThreadsContext,
        JobstoreClass,
        DriverDelegate,
        TablePrefix,
        DataSource,
        Driver,
        Url,
        Usr,
        Password,
        MaxConnections;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }
    public static final int ID = AttributesEnum.Id.index();
    public static final int INSTANCENAME = AttributesEnum.InstanceName.index();
    public static final int THREADPOOLCLASS = AttributesEnum.ThreadpoolClass.index();
    public static final int THREADCOUNT = AttributesEnum.ThreadCount.index();
    public static final int THREADSCONTEXT = AttributesEnum.ThreadsContext.index();
    public static final int JOBSTORECLASS = AttributesEnum.JobstoreClass.index();
    public static final int DRIVERDELEGATE = AttributesEnum.DriverDelegate.index();
    public static final int TABLEPREFIX = AttributesEnum.TablePrefix.index();
    public static final int DATASOURCE = AttributesEnum.DataSource.index();
    public static final int DRIVER = AttributesEnum.Driver.index();
    public static final int URL = AttributesEnum.Url.index();
    public static final int USR = AttributesEnum.Usr.index();
    public static final int PASSWORD = AttributesEnum.Password.index();
    public static final int MAXCONNECTIONS = AttributesEnum.MaxConnections.index();

    /**
     * This is the default constructor (do not remove).
     */
    public QuartzPropertyImpl() {
    }

    /**
     * Gets the attribute value for Id, using the alias name Id.
     * @return the value of Id
     */
    public String getId() {
        return (String) getAttributeInternal(ID);
    }

    /**
     * Sets <code>value</code> as the attribute value for Id.
     * @param value value to set the Id
     */
    public void setId(String value) {
        setAttributeInternal(ID, value);
    }

    /**
     * Gets the attribute value for InstanceName, using the alias name InstanceName.
     * @return the value of InstanceName
     */
    public String getInstanceName() {
        return (String) getAttributeInternal(INSTANCENAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for InstanceName.
     * @param value value to set the InstanceName
     */
    public void setInstanceName(String value) {
        setAttributeInternal(INSTANCENAME, value);
    }

    /**
     * Gets the attribute value for ThreadpoolClass, using the alias name ThreadpoolClass.
     * @return the value of ThreadpoolClass
     */
    public String getThreadpoolClass() {
        return (String) getAttributeInternal(THREADPOOLCLASS);
    }

    /**
     * Sets <code>value</code> as the attribute value for ThreadpoolClass.
     * @param value value to set the ThreadpoolClass
     */
    public void setThreadpoolClass(String value) {
        setAttributeInternal(THREADPOOLCLASS, value);
    }

    /**
     * Gets the attribute value for ThreadCount, using the alias name ThreadCount.
     * @return the value of ThreadCount
     */
    public String getThreadCount() {
        return (String) getAttributeInternal(THREADCOUNT);
    }

    /**
     * Sets <code>value</code> as the attribute value for ThreadCount.
     * @param value value to set the ThreadCount
     */
    public void setThreadCount(String value) {
        setAttributeInternal(THREADCOUNT, value);
    }

    /**
     * Gets the attribute value for ThreadsContext, using the alias name ThreadsContext.
     * @return the value of ThreadsContext
     */
    public String getThreadsContext() {
        return (String) getAttributeInternal(THREADSCONTEXT);
    }

    /**
     * Sets <code>value</code> as the attribute value for ThreadsContext.
     * @param value value to set the ThreadsContext
     */
    public void setThreadsContext(String value) {
        setAttributeInternal(THREADSCONTEXT, value);
    }

    /**
     * Gets the attribute value for JobstoreClass, using the alias name JobstoreClass.
     * @return the value of JobstoreClass
     */
    public String getJobstoreClass() {
        return (String) getAttributeInternal(JOBSTORECLASS);
    }

    /**
     * Sets <code>value</code> as the attribute value for JobstoreClass.
     * @param value value to set the JobstoreClass
     */
    public void setJobstoreClass(String value) {
        setAttributeInternal(JOBSTORECLASS, value);
    }

    /**
     * Gets the attribute value for DriverDelegate, using the alias name DriverDelegate.
     * @return the value of DriverDelegate
     */
    public String getDriverDelegate() {
        return (String) getAttributeInternal(DRIVERDELEGATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for DriverDelegate.
     * @param value value to set the DriverDelegate
     */
    public void setDriverDelegate(String value) {
        setAttributeInternal(DRIVERDELEGATE, value);
    }

    /**
     * Gets the attribute value for TablePrefix, using the alias name TablePrefix.
     * @return the value of TablePrefix
     */
    public String getTablePrefix() {
        return (String) getAttributeInternal(TABLEPREFIX);
    }

    /**
     * Sets <code>value</code> as the attribute value for TablePrefix.
     * @param value value to set the TablePrefix
     */
    public void setTablePrefix(String value) {
        setAttributeInternal(TABLEPREFIX, value);
    }

    /**
     * Gets the attribute value for DataSource, using the alias name DataSource.
     * @return the value of DataSource
     */
    public String getDataSource() {
        return (String) getAttributeInternal(DATASOURCE);
    }

    /**
     * Sets <code>value</code> as the attribute value for DataSource.
     * @param value value to set the DataSource
     */
    public void setDataSource(String value) {
        setAttributeInternal(DATASOURCE, value);
    }

    /**
     * Gets the attribute value for Driver, using the alias name Driver.
     * @return the value of Driver
     */
    public String getDriver() {
        return (String) getAttributeInternal(DRIVER);
    }

    /**
     * Sets <code>value</code> as the attribute value for Driver.
     * @param value value to set the Driver
     */
    public void setDriver(String value) {
        setAttributeInternal(DRIVER, value);
    }

    /**
     * Gets the attribute value for Url, using the alias name Url.
     * @return the value of Url
     */
    public String getUrl() {
        return (String) getAttributeInternal(URL);
    }

    /**
     * Sets <code>value</code> as the attribute value for Url.
     * @param value value to set the Url
     */
    public void setUrl(String value) {
        setAttributeInternal(URL, value);
    }

    /**
     * Gets the attribute value for Usr, using the alias name Usr.
     * @return the value of Usr
     */
    public String getUsr() {
        return (String) getAttributeInternal(USR);
    }

    /**
     * Sets <code>value</code> as the attribute value for Usr.
     * @param value value to set the Usr
     */
    public void setUsr(String value) {
        setAttributeInternal(USR, value);
    }

    /**
     * Gets the attribute value for Password, using the alias name Password.
     * @return the value of Password
     */
    public String getPassword() {
        return (String) getAttributeInternal(PASSWORD);
    }

    /**
     * Sets <code>value</code> as the attribute value for Password.
     * @param value value to set the Password
     */
    public void setPassword(String value) {
        setAttributeInternal(PASSWORD, value);
    }

    /**
     * Gets the attribute value for MaxConnections, using the alias name MaxConnections.
     * @return the value of MaxConnections
     */
    public String getMaxConnections() {
        return (String) getAttributeInternal(MAXCONNECTIONS);
    }

    /**
     * Sets <code>value</code> as the attribute value for MaxConnections.
     * @param value value to set the MaxConnections
     */
    public void setMaxConnections(String value) {
        setAttributeInternal(MAXCONNECTIONS, value);
    }

    /**
     * @param id key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(String id) {
        return new Key(new Object[] { id });
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("ua.divas.model.QuartzProperty");
    }
}

