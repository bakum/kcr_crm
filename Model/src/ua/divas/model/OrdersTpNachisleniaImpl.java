package ua.divas.model;

import java.math.BigDecimal;

import java.sql.Timestamp;

import java.util.UUID;

import oracle.jbo.Key;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;

import oracle.jbo.server.TransactionEvent;

import ua.divas.classes.DivasEntityNoDelete;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sun Feb 22 01:10:35 EET 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class OrdersTpNachisleniaImpl extends DivasEntityNoDelete {

    @Override
    protected void callId() {
        this.setId(UUID.randomUUID().toString());
    }

    @Override
    protected void doDML(int i, TransactionEvent transactionEvent) {
        super.doDML(i, transactionEvent);
        String _id = this.getOrderId();
        callStoredProcedure("ORDERS_ENTRY.orders_move_plan_acc(?)", new Object[] { _id });
    }

    private String getBaseName(String id) {
        return (String) callStoredFunction(VARCHAR2, "UTILITY.retrieve_name_baseofcalc(?)", new Object[] { id });
    }

    private String getIdFromAlgorythm(String id) {
        return (String) callStoredFunction(VARCHAR2, "UTILITY.retrieve_idfromalgorythm(?)", new Object[] { id });
    }

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        Id,
        OrderId,
        DatNach,
        KontrId,
        Summ,
        Description,
        CalcId,
        Percent,
        Manual,
        PayId,
        BaseOfCalc,
        Kontragents;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int ID = AttributesEnum.Id.index();
    public static final int ORDERID = AttributesEnum.OrderId.index();
    public static final int DATNACH = AttributesEnum.DatNach.index();
    public static final int KONTRID = AttributesEnum.KontrId.index();
    public static final int SUMM = AttributesEnum.Summ.index();
    public static final int DESCRIPTION = AttributesEnum.Description.index();
    public static final int CALCID = AttributesEnum.CalcId.index();
    public static final int PERCENT = AttributesEnum.Percent.index();
    public static final int MANUAL = AttributesEnum.Manual.index();
    public static final int PAYID = AttributesEnum.PayId.index();
    public static final int BASEOFCALC = AttributesEnum.BaseOfCalc.index();
    public static final int KONTRAGENTS = AttributesEnum.Kontragents.index();

    /**
     * This is the default constructor (do not remove).
     */
    public OrdersTpNachisleniaImpl() {
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("ua.divas.model.OrdersTpNachislenia");
    }


    /**
     * Gets the attribute value for Id, using the alias name Id.
     * @return the value of Id
     */
    public String getId() {
        return (String) getAttributeInternal(ID);
    }

    /**
     * Sets <code>value</code> as the attribute value for Id.
     * @param value value to set the Id
     */
    public void setId(String value) {
        setAttributeInternal(ID, value);
    }

    /**
     * Gets the attribute value for OrderId, using the alias name OrderId.
     * @return the value of OrderId
     */
    public String getOrderId() {
        return (String) getAttributeInternal(ORDERID);
    }

    /**
     * Sets <code>value</code> as the attribute value for OrderId.
     * @param value value to set the OrderId
     */
    public void setOrderId(String value) {
        setAttributeInternal(ORDERID, value);
    }

    /**
     * Gets the attribute value for DatNach, using the alias name DatNach.
     * @return the value of DatNach
     */
    public Timestamp getDatNach() {
        return (Timestamp) getAttributeInternal(DATNACH);
    }

    /**
     * Sets <code>value</code> as the attribute value for DatNach.
     * @param value value to set the DatNach
     */
    public void setDatNach(Timestamp value) {
        setAttributeInternal(DATNACH, value);
    }

    /**
     * Gets the attribute value for KontrId, using the alias name KontrId.
     * @return the value of KontrId
     */
    public String getKontrId() {
        return (String) getAttributeInternal(KONTRID);
    }

    /**
     * Sets <code>value</code> as the attribute value for KontrId.
     * @param value value to set the KontrId
     */
    public void setKontrId(String value) {
        setAttributeInternal(KONTRID, value);
    }

    /**
     * Gets the attribute value for Summ, using the alias name Summ.
     * @return the value of Summ
     */
    public BigDecimal getSumm() {
        return (BigDecimal) getAttributeInternal(SUMM);
    }

    /**
     * Sets <code>value</code> as the attribute value for Summ.
     * @param value value to set the Summ
     */
    public void setSumm(BigDecimal value) {
        setAttributeInternal(SUMM, value);
    }

    /**
     * Gets the attribute value for Description, using the alias name Description.
     * @return the value of Description
     */
    public String getDescription() {
        return (String) getAttributeInternal(DESCRIPTION);
    }

    /**
     * Sets <code>value</code> as the attribute value for Description.
     * @param value value to set the Description
     */
    public void setDescription(String value) {
        setAttributeInternal(DESCRIPTION, value);
    }

    /**
     * Gets the attribute value for CalcId, using the alias name CalcId.
     * @return the value of CalcId
     */
    public String getCalcId() {
        return (String) getAttributeInternal(CALCID);
    }

    /**
     * Sets <code>value</code> as the attribute value for CalcId.
     * @param value value to set the CalcId
     */
    public void setCalcId(String value) {
        setAttributeInternal(CALCID, value);
    }

    /**
     * Gets the attribute value for Percent, using the alias name Percent.
     * @return the value of Percent
     */
    public BigDecimal getPercent() {
        return (BigDecimal) getAttributeInternal(PERCENT);
    }

    /**
     * Sets <code>value</code> as the attribute value for Percent.
     * @param value value to set the Percent
     */
    public void setPercent(BigDecimal value) {
        setAttributeInternal(PERCENT, value);
    }

    /**
     * Gets the attribute value for Manual, using the alias name Manual.
     * @return the value of Manual
     */
    public Integer getManual() {
        return (Integer) getAttributeInternal(MANUAL);
    }

    /**
     * Sets <code>value</code> as the attribute value for Manual.
     * @param value value to set the Manual
     */
    public void setManual(Integer value) {
        setAttributeInternal(MANUAL, value);
    }

    /**
     * Gets the attribute value for PayId, using the alias name PayId.
     * @return the value of PayId
     */
    public String getPayId() {
        return (String) getAttributeInternal(PAYID);
    }

    /**
     * Sets <code>value</code> as the attribute value for PayId.
     * @param value value to set the PayId
     */
    public void setPayId(String value) {
        setAttributeInternal(PAYID, value);
    }

    /**
     * @return the associated entity oracle.jbo.server.EntityImpl.
     */
    public EntityImpl getBaseOfCalc() {
        return (EntityImpl) getAttributeInternal(BASEOFCALC);
    }

    /**
     * Sets <code>value</code> as the associated entity oracle.jbo.server.EntityImpl.
     */
    public void setBaseOfCalc(EntityImpl value) {
        setAttributeInternal(BASEOFCALC, value);
    }

    /**
     * @return the associated entity KontragentsImpl.
     */
    public KontragentsImpl getKontragents() {
        return (KontragentsImpl) getAttributeInternal(KONTRAGENTS);
    }

    /**
     * Sets <code>value</code> as the associated entity KontragentsImpl.
     */
    public void setKontragents(KontragentsImpl value) {
        setAttributeInternal(KONTRAGENTS, value);
    }

    /**
     * @param id key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(String id) {
        return new Key(new Object[] { id });
    }

    /**
     * Validation method for OrdersTpNachislenia.
     */
    public boolean validateOrdersTpNachislenia2() {
        BigDecimal s = getSumm();
        if (s == null || s.floatValue() == 0) {
            return false;
        }
        return true;
    }


    /**
     * Validation method for OrdersTpNachislenia.
     */
    public boolean validateOrdersTpNachislenia1() {
        String bName = getBaseName(getCalcId());
        String alId = getPayId();
        String bId = getIdFromAlgorythm(alId);
        String baName = getBaseName(bId);
        if (!bName.equalsIgnoreCase(baName)) {
            return false;
        }
        return true;
    }


    /**
     * Validation method for OrdersTpNachislenia.
     */
    public boolean validateOrdersTpNachislenia() {
        BigDecimal percent = getPercent();
        String bName = getBaseName(getCalcId());
        if (bName.equals("Процент") && (percent == null || percent.floatValue() == 0)) {
            return false;
        }
        return true;
    }


}

