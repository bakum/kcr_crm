package ua.divas.model;

import java.math.BigDecimal;

import java.sql.Timestamp;

import java.util.UUID;

import oracle.jbo.Key;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;

import oracle.jbo.server.TransactionEvent;

import ua.divas.classes.DivasEntityNoDelete;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Dec 09 14:33:43 EET 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class OrdersTpOplatyImpl extends DivasEntityNoDelete {
    @Override
    protected void callId() {
        this.setId(UUID.randomUUID().toString());
    }
    
    @Override
    protected void doDML(int i, TransactionEvent transactionEvent) {
        super.doDML(i, transactionEvent);
        String _id = this.getOrderId();
        callStoredProcedure("ORDERS_ENTRY.orders_move_plan_acc(?)", new Object[] { _id });
    }

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        Id,
        OrderId,
        Dat,
        Sum1,
        UserId,
        Comments,
        ZamerId,
        KassaId,
        Users,
        Orders,
        Kontragents,
        Kassa;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int ID = AttributesEnum.Id.index();
    public static final int ORDERID = AttributesEnum.OrderId.index();
    public static final int DAT = AttributesEnum.Dat.index();
    public static final int SUM1 = AttributesEnum.Sum1.index();
    public static final int USERID = AttributesEnum.UserId.index();
    public static final int COMMENTS = AttributesEnum.Comments.index();
    public static final int ZAMERID = AttributesEnum.ZamerId.index();
    public static final int KASSAID = AttributesEnum.KassaId.index();
    public static final int USERS = AttributesEnum.Users.index();
    public static final int ORDERS = AttributesEnum.Orders.index();
    public static final int KONTRAGENTS = AttributesEnum.Kontragents.index();
    public static final int KASSA = AttributesEnum.Kassa.index();

    /**
     * This is the default constructor (do not remove).
     */
    public OrdersTpOplatyImpl() {
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("ua.divas.model.OrdersTpOplaty");
    }


    /**
     * Gets the attribute value for Id, using the alias name Id.
     * @return the value of Id
     */
    public String getId() {
        return (String) getAttributeInternal(ID);
    }

    /**
     * Sets <code>value</code> as the attribute value for Id.
     * @param value value to set the Id
     */
    public void setId(String value) {
        setAttributeInternal(ID, value);
    }

    /**
     * Gets the attribute value for OrderId, using the alias name OrderId.
     * @return the value of OrderId
     */
    public String getOrderId() {
        return (String) getAttributeInternal(ORDERID);
    }

    /**
     * Sets <code>value</code> as the attribute value for OrderId.
     * @param value value to set the OrderId
     */
    public void setOrderId(String value) {
        setAttributeInternal(ORDERID, value);
    }

    /**
     * Gets the attribute value for Dat, using the alias name Dat.
     * @return the value of Dat
     */
    public Timestamp getDat() {
        return (Timestamp) getAttributeInternal(DAT);
    }

    /**
     * Sets <code>value</code> as the attribute value for Dat.
     * @param value value to set the Dat
     */
    public void setDat(Timestamp value) {
        setAttributeInternal(DAT, value);
    }

    /**
     * Gets the attribute value for Sum1, using the alias name Sum1.
     * @return the value of Sum1
     */
    public BigDecimal getSum1() {
        return (BigDecimal) getAttributeInternal(SUM1);
    }

    /**
     * Sets <code>value</code> as the attribute value for Sum1.
     * @param value value to set the Sum1
     */
    public void setSum1(BigDecimal value) {
        setAttributeInternal(SUM1, value);
    }

    /**
     * Gets the attribute value for UserId, using the alias name UserId.
     * @return the value of UserId
     */
    public String getUserId() {
        return (String) getAttributeInternal(USERID);
    }

    /**
     * Sets <code>value</code> as the attribute value for UserId.
     * @param value value to set the UserId
     */
    public void setUserId(String value) {
        setAttributeInternal(USERID, value);
    }

    /**
     * Gets the attribute value for Comments, using the alias name Comments.
     * @return the value of Comments
     */
    public String getComments() {
        return (String) getAttributeInternal(COMMENTS);
    }

    /**
     * Sets <code>value</code> as the attribute value for Comments.
     * @param value value to set the Comments
     */
    public void setComments(String value) {
        setAttributeInternal(COMMENTS, value);
    }

    /**
     * Gets the attribute value for ZamerId, using the alias name ZamerId.
     * @return the value of ZamerId
     */
    public String getZamerId() {
        return (String) getAttributeInternal(ZAMERID);
    }

    /**
     * Sets <code>value</code> as the attribute value for ZamerId.
     * @param value value to set the ZamerId
     */
    public void setZamerId(String value) {
        setAttributeInternal(ZAMERID, value);
    }

    /**
     * Gets the attribute value for KassaId, using the alias name KassaId.
     * @return the value of KassaId
     */
    public String getKassaId() {
        return (String) getAttributeInternal(KASSAID);
    }

    /**
     * Sets <code>value</code> as the attribute value for KassaId.
     * @param value value to set the KassaId
     */
    public void setKassaId(String value) {
        setAttributeInternal(KASSAID, value);
    }

    /**
     * @return the associated entity UsersImpl.
     */
    public UsersImpl getUsers() {
        return (UsersImpl) getAttributeInternal(USERS);
    }

    /**
     * Sets <code>value</code> as the associated entity UsersImpl.
     */
    public void setUsers(UsersImpl value) {
        setAttributeInternal(USERS, value);
    }

    /**
     * @return the associated entity OrdersImpl.
     */
    public OrdersImpl getOrders() {
        return (OrdersImpl) getAttributeInternal(ORDERS);
    }

    /**
     * Sets <code>value</code> as the associated entity OrdersImpl.
     */
    public void setOrders(OrdersImpl value) {
        setAttributeInternal(ORDERS, value);
    }

    /**
     * @return the associated entity KontragentsImpl.
     */
    public KontragentsImpl getKontragents() {
        return (KontragentsImpl) getAttributeInternal(KONTRAGENTS);
    }

    /**
     * Sets <code>value</code> as the associated entity KontragentsImpl.
     */
    public void setKontragents(KontragentsImpl value) {
        setAttributeInternal(KONTRAGENTS, value);
    }

    /**
     * @return the associated entity KassaImpl.
     */
    public KassaImpl getKassa() {
        return (KassaImpl) getAttributeInternal(KASSA);
    }

    /**
     * Sets <code>value</code> as the associated entity KassaImpl.
     */
    public void setKassa(KassaImpl value) {
        setAttributeInternal(KASSA, value);
    }

    /**
     * @param id key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(String id) {
        return new Key(new Object[] { id });
    }


}

