package ua.divas.model;

import java.math.BigDecimal;

import java.sql.Timestamp;

import java.util.UUID;

import oracle.jbo.Key;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;

import ua.divas.classes.DivasEntityNoDelete;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue May 26 21:13:21 EEST 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class KontragSettingsImpl extends DivasEntityNoDelete {
    
    @Override
    protected void callId() {
        this.setId(UUID.randomUUID().toString());
    }
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        Id,
        KontragId,
        PayId,
        Version,
        BaseId,
        DivisionId,
        Summa,
        PaySettings,
        BaseOfNachisl,
        Kontragents;
        static AttributesEnum[] vals = null;
        ;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int ID = AttributesEnum.Id.index();
    public static final int KONTRAGID = AttributesEnum.KontragId.index();
    public static final int PAYID = AttributesEnum.PayId.index();
    public static final int VERSION = AttributesEnum.Version.index();
    public static final int BASEID = AttributesEnum.BaseId.index();
    public static final int DIVISIONID = AttributesEnum.DivisionId.index();
    public static final int SUMMA = AttributesEnum.Summa.index();
    public static final int PAYSETTINGS = AttributesEnum.PaySettings.index();
    public static final int BASEOFNACHISL = AttributesEnum.BaseOfNachisl.index();
    public static final int KONTRAGENTS = AttributesEnum.Kontragents.index();

    /**
     * This is the default constructor (do not remove).
     */
    public KontragSettingsImpl() {
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("ua.divas.model.KontragSettings");
    }


    /**
     * Gets the attribute value for Id, using the alias name Id.
     * @return the value of Id
     */
    public String getId() {
        return (String) getAttributeInternal(ID);
    }

    /**
     * Sets <code>value</code> as the attribute value for Id.
     * @param value value to set the Id
     */
    public void setId(String value) {
        setAttributeInternal(ID, value);
    }

    /**
     * Gets the attribute value for KontragId, using the alias name KontragId.
     * @return the value of KontragId
     */
    public String getKontragId() {
        return (String) getAttributeInternal(KONTRAGID);
    }

    /**
     * Sets <code>value</code> as the attribute value for KontragId.
     * @param value value to set the KontragId
     */
    public void setKontragId(String value) {
        setAttributeInternal(KONTRAGID, value);
    }

    /**
     * Gets the attribute value for PayId, using the alias name PayId.
     * @return the value of PayId
     */
    public String getPayId() {
        return (String) getAttributeInternal(PAYID);
    }

    /**
     * Sets <code>value</code> as the attribute value for PayId.
     * @param value value to set the PayId
     */
    public void setPayId(String value) {
        setAttributeInternal(PAYID, value);
    }

    /**
     * Gets the attribute value for Version, using the alias name Version.
     * @return the value of Version
     */
    public Timestamp getVersion() {
        return (Timestamp) getAttributeInternal(VERSION);
    }

    /**
     * Sets <code>value</code> as the attribute value for Version.
     * @param value value to set the Version
     */
    public void setVersion(Timestamp value) {
        setAttributeInternal(VERSION, value);
    }

    /**
     * Gets the attribute value for BaseId, using the alias name BaseId.
     * @return the value of BaseId
     */
    public String getBaseId() {
        return (String) getAttributeInternal(BASEID);
    }

    /**
     * Sets <code>value</code> as the attribute value for BaseId.
     * @param value value to set the BaseId
     */
    public void setBaseId(String value) {
        setAttributeInternal(BASEID, value);
    }

    /**
     * Gets the attribute value for DivisionId, using the alias name DivisionId.
     * @return the value of DivisionId
     */
    public String getDivisionId() {
        return (String) getAttributeInternal(DIVISIONID);
    }

    /**
     * Sets <code>value</code> as the attribute value for DivisionId.
     * @param value value to set the DivisionId
     */
    public void setDivisionId(String value) {
        setAttributeInternal(DIVISIONID, value);
    }

    /**
     * Gets the attribute value for Summa, using the alias name Summa.
     * @return the value of Summa
     */
    public BigDecimal getSumma() {
        return (BigDecimal) getAttributeInternal(SUMMA);
    }

    /**
     * Sets <code>value</code> as the attribute value for Summa.
     * @param value value to set the Summa
     */
    public void setSumma(BigDecimal value) {
        setAttributeInternal(SUMMA, value);
    }

    /**
     * @return the associated entity PaySettingsImpl.
     */
    public PaySettingsImpl getPaySettings() {
        return (PaySettingsImpl) getAttributeInternal(PAYSETTINGS);
    }

    /**
     * Sets <code>value</code> as the associated entity PaySettingsImpl.
     */
    public void setPaySettings(PaySettingsImpl value) {
        setAttributeInternal(PAYSETTINGS, value);
    }


    /**
     * @return the associated entity oracle.jbo.server.EntityImpl.
     */
    public EntityImpl getBaseOfNachisl() {
        return (EntityImpl) getAttributeInternal(BASEOFNACHISL);
    }

    /**
     * Sets <code>value</code> as the associated entity oracle.jbo.server.EntityImpl.
     */
    public void setBaseOfNachisl(EntityImpl value) {
        setAttributeInternal(BASEOFNACHISL, value);
    }

    /**
     * @return the associated entity KontragentsImpl.
     */
    public KontragentsImpl getKontragents() {
        return (KontragentsImpl) getAttributeInternal(KONTRAGENTS);
    }

    /**
     * Sets <code>value</code> as the associated entity KontragentsImpl.
     */
    public void setKontragents(KontragentsImpl value) {
        setAttributeInternal(KONTRAGENTS, value);
    }


    /**
     * @param id key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(String id) {
        return new Key(new Object[] { id });
    }

    /**
     * Validation method for KontragSettings.
     */
    public boolean validateKontragSettings2() {
        String bId = getBaseId();
        String bName = getBaseNachislName(bId);
        if (bName.equals("DIV")) {
            return false;
        }
        /* if (!bName.equals("IERARHIA")) {
            return false;
        } */
        return true;
    }


    /**
     * Validation method for KontragSettings.
     */
    public boolean validateKontragSettings1() {
        String bId = getBaseId();
        String bName = getBaseNachislName(bId);
        String div = getDivisionId();
        if (bName.equals("ORDER")) {
            return true;
        }
        if (bName.equals("DIV") && div == null) {
            return false;
        }
        return true;
    }


    public String getIdFromAlgorythm(String id) {
        return (String) callStoredFunction(VARCHAR2, "UTILITY.retrieve_idfromalgorythm(?)", new Object[] { id });
    }
    public String getBaseName(String id) {
        return (String) callStoredFunction(VARCHAR2, "UTILITY.retrieve_name_baseofcalc(?)", new Object[] { id });
    }
    public String getBaseNachislName(String id) {
        return (String) callStoredFunction(VARCHAR2, "UTILITY.retrieve_name_basenachisl(?)", new Object[] { id });
    }

    /**
     * Validation method for KontragSettings.
     */
    public boolean validateKontragSettings() {
        String alId = getPayId();
        String bId = getIdFromAlgorythm(alId);
        String bName = getBaseName(bId);
        BigDecimal sm = getSumma();
        if (!bName.equals("Процент") && (sm == null || sm.floatValue() == 0)) {
            return false;
        }
        return true;
    }


}

