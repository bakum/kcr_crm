package ua.divas.view;

import java.math.BigDecimal;

import java.sql.Timestamp;

import oracle.jbo.AttributeList;
import oracle.jbo.RowSet;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.ViewRowImpl;

import ua.divas.model.OrdersTpNachisleniaImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sun Feb 22 03:07:25 EET 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class OrdersTpNachisleniaViewRowImpl extends ViewRowImpl {


    public static final int ENTITY_ORDERSTPNACHISLENIA = 0;

    @Override
    public boolean isAttributeUpdateable(int i) {
        BigDecimal editable = this.getOtpnEditable();
        if (editable.intValue()==0) {
            return false;
        } else { 
        return super.isAttributeUpdateable(i);
            }
    }

    @Override
    protected void create(AttributeList attributeList) {
        this.setOtpnEditable(new BigDecimal(1));
        //this.setForValidation(new Integer(2));
        super.create(attributeList);
    }

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        CalcId,
        DatNach,
        Description,
        Id,
        KontrId,
        Kontname,
        OrderId,
        Percent,
        Summ,
        OtpnEditable,
        Manual,
        PayId,
        PayName,
        TableName,
        BaseOfCalcView1,
        KontragentsView1,
        PaySettingsView1;
        static AttributesEnum[] vals = null;
        ;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int CALCID = AttributesEnum.CalcId.index();
    public static final int DATNACH = AttributesEnum.DatNach.index();
    public static final int DESCRIPTION = AttributesEnum.Description.index();
    public static final int ID = AttributesEnum.Id.index();
    public static final int KONTRID = AttributesEnum.KontrId.index();
    public static final int KONTNAME = AttributesEnum.Kontname.index();
    public static final int ORDERID = AttributesEnum.OrderId.index();
    public static final int PERCENT = AttributesEnum.Percent.index();
    public static final int SUMM = AttributesEnum.Summ.index();
    public static final int OTPNEDITABLE = AttributesEnum.OtpnEditable.index();
    public static final int MANUAL = AttributesEnum.Manual.index();
    public static final int PAYID = AttributesEnum.PayId.index();
    public static final int PAYNAME = AttributesEnum.PayName.index();
    public static final int TABLENAME = AttributesEnum.TableName.index();
    public static final int BASEOFCALCVIEW1 = AttributesEnum.BaseOfCalcView1.index();
    public static final int KONTRAGENTSVIEW1 = AttributesEnum.KontragentsView1.index();
    public static final int PAYSETTINGSVIEW1 = AttributesEnum.PaySettingsView1.index();

    /**
     * This is the default constructor (do not remove).
     */
    public OrdersTpNachisleniaViewRowImpl() {
    }

    /**
     * Gets OrdersTpNachislenia entity object.
     * @return the OrdersTpNachislenia
     */
    public OrdersTpNachisleniaImpl getOrdersTpNachislenia() {
        return (OrdersTpNachisleniaImpl) getEntity(ENTITY_ORDERSTPNACHISLENIA);
    }

    /**
     * Gets the attribute value for CALC_ID using the alias name CalcId.
     * @return the CALC_ID
     */
    public String getCalcId() {
        return (String) getAttributeInternal(CALCID);
    }

    /**
     * Sets <code>value</code> as attribute value for CALC_ID using the alias name CalcId.
     * @param value value to set the CALC_ID
     */
    public void setCalcId(String value) {
        setAttributeInternal(CALCID, value);
    }

    /**
     * Gets the attribute value for DAT_NACH using the alias name DatNach.
     * @return the DAT_NACH
     */
    public Timestamp getDatNach() {
        return (Timestamp) getAttributeInternal(DATNACH);
    }

    /**
     * Sets <code>value</code> as attribute value for DAT_NACH using the alias name DatNach.
     * @param value value to set the DAT_NACH
     */
    public void setDatNach(Timestamp value) {
        setAttributeInternal(DATNACH, value);
    }

    /**
     * Gets the attribute value for DESCRIPTION using the alias name Description.
     * @return the DESCRIPTION
     */
    public String getDescription() {
        return (String) getAttributeInternal(DESCRIPTION);
    }

    /**
     * Sets <code>value</code> as attribute value for DESCRIPTION using the alias name Description.
     * @param value value to set the DESCRIPTION
     */
    public void setDescription(String value) {
        setAttributeInternal(DESCRIPTION, value);
    }

    /**
     * Gets the attribute value for ID using the alias name Id.
     * @return the ID
     */
    public String getId() {
        return (String) getAttributeInternal(ID);
    }

    /**
     * Sets <code>value</code> as attribute value for ID using the alias name Id.
     * @param value value to set the ID
     */
    public void setId(String value) {
        setAttributeInternal(ID, value);
    }

    /**
     * Gets the attribute value for KONTR_ID using the alias name KontrId.
     * @return the KONTR_ID
     */
    public String getKontrId() {
        return (String) getAttributeInternal(KONTRID);
    }

    /**
     * Sets <code>value</code> as attribute value for KONTR_ID using the alias name KontrId.
     * @param value value to set the KONTR_ID
     */
    public void setKontrId(String value) {
        setAttributeInternal(KONTRID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute Kontname.
     * @return the Kontname
     */
    public String getKontname() {
        return (String) getAttributeInternal(KONTNAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Kontname.
     * @param value value to set the  Kontname
     */
    public void setKontname(String value) {
        setAttributeInternal(KONTNAME, value);
    }

    /**
     * Gets the attribute value for ORDER_ID using the alias name OrderId.
     * @return the ORDER_ID
     */
    public String getOrderId() {
        return (String) getAttributeInternal(ORDERID);
    }

    /**
     * Sets <code>value</code> as attribute value for ORDER_ID using the alias name OrderId.
     * @param value value to set the ORDER_ID
     */
    public void setOrderId(String value) {
        setAttributeInternal(ORDERID, value);
    }

    /**
     * Gets the attribute value for PERCENT using the alias name Percent.
     * @return the PERCENT
     */
    public BigDecimal getPercent() {
        return (BigDecimal) getAttributeInternal(PERCENT);
    }

    /**
     * Sets <code>value</code> as attribute value for PERCENT using the alias name Percent.
     * @param value value to set the PERCENT
     */
    public void setPercent(BigDecimal value) {
        setAttributeInternal(PERCENT, value);
    }

    /**
     * Gets the attribute value for SUMM using the alias name Summ.
     * @return the SUMM
     */
    public BigDecimal getSumm() {
        return (BigDecimal) getAttributeInternal(SUMM);
    }

    /**
     * Sets <code>value</code> as attribute value for SUMM using the alias name Summ.
     * @param value value to set the SUMM
     */
    public void setSumm(BigDecimal value) {
        setAttributeInternal(SUMM, value);
    }

    /**
     * Gets the attribute value for the calculated attribute OtpnEditable.
     * @return the OtpnEditable
     */
    public BigDecimal getOtpnEditable() {
        return (BigDecimal) getAttributeInternal(OTPNEDITABLE);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute OtpnEditable.
     * @param value value to set the  OtpnEditable
     */
    public void setOtpnEditable(BigDecimal value) {
        setAttributeInternal(OTPNEDITABLE, value);
    }

    /**
     * Gets the attribute value for MANUAL using the alias name Manual.
     * @return the MANUAL
     */
    public Integer getManual() {
        return (Integer) getAttributeInternal(MANUAL);
    }

    /**
     * Sets <code>value</code> as attribute value for MANUAL using the alias name Manual.
     * @param value value to set the MANUAL
     */
    public void setManual(Integer value) {
        setAttributeInternal(MANUAL, value);
    }

    /**
     * Gets the attribute value for PAY_ID using the alias name PayId.
     * @return the PAY_ID
     */
    public String getPayId() {
        return (String) getAttributeInternal(PAYID);
    }

    /**
     * Sets <code>value</code> as attribute value for PAY_ID using the alias name PayId.
     * @param value value to set the PAY_ID
     */
    public void setPayId(String value) {
        setAttributeInternal(PAYID, value);
    }


    /**
     * Gets the attribute value for the calculated attribute PayName.
     * @return the PayName
     */
    public String getPayName() {
        return (String) getAttributeInternal(PAYNAME);
    }

    /**
     * Gets the attribute value for the calculated attribute TableName.
     * @return the TableName
     */
    public String getTableName() {
        return (String) getAttributeInternal(TABLENAME);
    }

    /**
     * Gets the view accessor <code>RowSet</code> BaseOfCalcView1.
     */
    public RowSet getBaseOfCalcView1() {
        return (RowSet) getAttributeInternal(BASEOFCALCVIEW1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> KontragentsView1.
     */
    public RowSet getKontragentsView1() {
        return (RowSet) getAttributeInternal(KONTRAGENTSVIEW1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> PaySettingsView1.
     */
    public RowSet getPaySettingsView1() {
        return (RowSet) getAttributeInternal(PAYSETTINGSVIEW1);
    }
}

