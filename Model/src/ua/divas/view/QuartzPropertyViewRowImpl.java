package ua.divas.view;

import java.math.BigDecimal;

import oracle.jbo.AttributeList;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.ViewRowImpl;

import ua.divas.model.QuartzPropertyImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Apr 03 22:26:48 EEST 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class QuartzPropertyViewRowImpl extends ViewRowImpl {
    public static final int ENTITY_QUARTZPROPERTY = 0;
    
    @Override
    public boolean isAttributeUpdateable(int i) {
        BigDecimal editable = this.getEditable();
        if (editable.intValue()==0) {
            return false;
        } else { 
        return super.isAttributeUpdateable(i);
            }
    }

    @Override
    protected void create(AttributeList attributeList) {
        this.setEditable(new BigDecimal(1));
        super.create(attributeList);
    }

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        Id,
        InstanceName,
        ThreadpoolClass,
        ThreadCount,
        ThreadsContext,
        JobstoreClass,
        DriverDelegate,
        TablePrefix,
        DataSource,
        Driver,
        Url,
        Usr,
        Password,
        MaxConnections,
        Editable;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }
    public static final int ID = AttributesEnum.Id.index();
    public static final int INSTANCENAME = AttributesEnum.InstanceName.index();
    public static final int THREADPOOLCLASS = AttributesEnum.ThreadpoolClass.index();
    public static final int THREADCOUNT = AttributesEnum.ThreadCount.index();
    public static final int THREADSCONTEXT = AttributesEnum.ThreadsContext.index();
    public static final int JOBSTORECLASS = AttributesEnum.JobstoreClass.index();
    public static final int DRIVERDELEGATE = AttributesEnum.DriverDelegate.index();
    public static final int TABLEPREFIX = AttributesEnum.TablePrefix.index();
    public static final int DATASOURCE = AttributesEnum.DataSource.index();
    public static final int DRIVER = AttributesEnum.Driver.index();
    public static final int URL = AttributesEnum.Url.index();
    public static final int USR = AttributesEnum.Usr.index();
    public static final int PASSWORD = AttributesEnum.Password.index();
    public static final int MAXCONNECTIONS = AttributesEnum.MaxConnections.index();
    public static final int EDITABLE = AttributesEnum.Editable.index();

    /**
     * This is the default constructor (do not remove).
     */
    public QuartzPropertyViewRowImpl() {
    }

    /**
     * Gets QuartzProperty entity object.
     * @return the QuartzProperty
     */
    public QuartzPropertyImpl getQuartzProperty() {
        return (QuartzPropertyImpl) getEntity(ENTITY_QUARTZPROPERTY);
    }

    /**
     * Gets the attribute value for ID using the alias name Id.
     * @return the ID
     */
    public String getId() {
        return (String) getAttributeInternal(ID);
    }

    /**
     * Sets <code>value</code> as attribute value for ID using the alias name Id.
     * @param value value to set the ID
     */
    public void setId(String value) {
        setAttributeInternal(ID, value);
    }

    /**
     * Gets the attribute value for INSTANCE_NAME using the alias name InstanceName.
     * @return the INSTANCE_NAME
     */
    public String getInstanceName() {
        return (String) getAttributeInternal(INSTANCENAME);
    }

    /**
     * Sets <code>value</code> as attribute value for INSTANCE_NAME using the alias name InstanceName.
     * @param value value to set the INSTANCE_NAME
     */
    public void setInstanceName(String value) {
        setAttributeInternal(INSTANCENAME, value);
    }

    /**
     * Gets the attribute value for THREADPOOL_CLASS using the alias name ThreadpoolClass.
     * @return the THREADPOOL_CLASS
     */
    public String getThreadpoolClass() {
        return (String) getAttributeInternal(THREADPOOLCLASS);
    }

    /**
     * Sets <code>value</code> as attribute value for THREADPOOL_CLASS using the alias name ThreadpoolClass.
     * @param value value to set the THREADPOOL_CLASS
     */
    public void setThreadpoolClass(String value) {
        setAttributeInternal(THREADPOOLCLASS, value);
    }

    /**
     * Gets the attribute value for THREAD_COUNT using the alias name ThreadCount.
     * @return the THREAD_COUNT
     */
    public String getThreadCount() {
        return (String) getAttributeInternal(THREADCOUNT);
    }

    /**
     * Sets <code>value</code> as attribute value for THREAD_COUNT using the alias name ThreadCount.
     * @param value value to set the THREAD_COUNT
     */
    public void setThreadCount(String value) {
        setAttributeInternal(THREADCOUNT, value);
    }

    /**
     * Gets the attribute value for THREADS_CONTEXT using the alias name ThreadsContext.
     * @return the THREADS_CONTEXT
     */
    public String getThreadsContext() {
        return (String) getAttributeInternal(THREADSCONTEXT);
    }

    /**
     * Sets <code>value</code> as attribute value for THREADS_CONTEXT using the alias name ThreadsContext.
     * @param value value to set the THREADS_CONTEXT
     */
    public void setThreadsContext(String value) {
        setAttributeInternal(THREADSCONTEXT, value);
    }

    /**
     * Gets the attribute value for JOBSTORE_CLASS using the alias name JobstoreClass.
     * @return the JOBSTORE_CLASS
     */
    public String getJobstoreClass() {
        return (String) getAttributeInternal(JOBSTORECLASS);
    }

    /**
     * Sets <code>value</code> as attribute value for JOBSTORE_CLASS using the alias name JobstoreClass.
     * @param value value to set the JOBSTORE_CLASS
     */
    public void setJobstoreClass(String value) {
        setAttributeInternal(JOBSTORECLASS, value);
    }

    /**
     * Gets the attribute value for DRIVER_DELEGATE using the alias name DriverDelegate.
     * @return the DRIVER_DELEGATE
     */
    public String getDriverDelegate() {
        return (String) getAttributeInternal(DRIVERDELEGATE);
    }

    /**
     * Sets <code>value</code> as attribute value for DRIVER_DELEGATE using the alias name DriverDelegate.
     * @param value value to set the DRIVER_DELEGATE
     */
    public void setDriverDelegate(String value) {
        setAttributeInternal(DRIVERDELEGATE, value);
    }

    /**
     * Gets the attribute value for TABLE_PREFIX using the alias name TablePrefix.
     * @return the TABLE_PREFIX
     */
    public String getTablePrefix() {
        return (String) getAttributeInternal(TABLEPREFIX);
    }

    /**
     * Sets <code>value</code> as attribute value for TABLE_PREFIX using the alias name TablePrefix.
     * @param value value to set the TABLE_PREFIX
     */
    public void setTablePrefix(String value) {
        setAttributeInternal(TABLEPREFIX, value);
    }

    /**
     * Gets the attribute value for DATA_SOURCE using the alias name DataSource.
     * @return the DATA_SOURCE
     */
    public String getDataSource() {
        return (String) getAttributeInternal(DATASOURCE);
    }

    /**
     * Sets <code>value</code> as attribute value for DATA_SOURCE using the alias name DataSource.
     * @param value value to set the DATA_SOURCE
     */
    public void setDataSource(String value) {
        setAttributeInternal(DATASOURCE, value);
    }

    /**
     * Gets the attribute value for DRIVER using the alias name Driver.
     * @return the DRIVER
     */
    public String getDriver() {
        return (String) getAttributeInternal(DRIVER);
    }

    /**
     * Sets <code>value</code> as attribute value for DRIVER using the alias name Driver.
     * @param value value to set the DRIVER
     */
    public void setDriver(String value) {
        setAttributeInternal(DRIVER, value);
    }

    /**
     * Gets the attribute value for URL using the alias name Url.
     * @return the URL
     */
    public String getUrl() {
        return (String) getAttributeInternal(URL);
    }

    /**
     * Sets <code>value</code> as attribute value for URL using the alias name Url.
     * @param value value to set the URL
     */
    public void setUrl(String value) {
        setAttributeInternal(URL, value);
    }

    /**
     * Gets the attribute value for USR using the alias name Usr.
     * @return the USR
     */
    public String getUsr() {
        return (String) getAttributeInternal(USR);
    }

    /**
     * Sets <code>value</code> as attribute value for USR using the alias name Usr.
     * @param value value to set the USR
     */
    public void setUsr(String value) {
        setAttributeInternal(USR, value);
    }

    /**
     * Gets the attribute value for PASSWORD using the alias name Password.
     * @return the PASSWORD
     */
    public String getPassword() {
        return (String) getAttributeInternal(PASSWORD);
    }

    /**
     * Sets <code>value</code> as attribute value for PASSWORD using the alias name Password.
     * @param value value to set the PASSWORD
     */
    public void setPassword(String value) {
        setAttributeInternal(PASSWORD, value);
    }

    /**
     * Gets the attribute value for MAX_CONNECTIONS using the alias name MaxConnections.
     * @return the MAX_CONNECTIONS
     */
    public String getMaxConnections() {
        return (String) getAttributeInternal(MAXCONNECTIONS);
    }

    /**
     * Sets <code>value</code> as attribute value for MAX_CONNECTIONS using the alias name MaxConnections.
     * @param value value to set the MAX_CONNECTIONS
     */
    public void setMaxConnections(String value) {
        setAttributeInternal(MAXCONNECTIONS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute Editable.
     * @return the Editable
     */
    public BigDecimal getEditable() {
        return (BigDecimal) getAttributeInternal(EDITABLE);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Editable.
     * @param value value to set the  Editable
     */
    public void setEditable(BigDecimal value) {
        setAttributeInternal(EDITABLE, value);
    }
}

